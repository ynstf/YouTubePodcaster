[
    {
        "label": "librosa",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "librosa",
        "description": "librosa",
        "detail": "librosa",
        "documentation": {}
    },
    {
        "label": "AudioFileClip",
        "importPath": "moviepy.editor",
        "description": "moviepy.editor",
        "isExtraImport": true,
        "detail": "moviepy.editor",
        "documentation": {}
    },
    {
        "label": "CompositeAudioClip",
        "importPath": "moviepy.editor",
        "description": "moviepy.editor",
        "isExtraImport": true,
        "detail": "moviepy.editor",
        "documentation": {}
    },
    {
        "label": "afx",
        "importPath": "moviepy.editor",
        "description": "moviepy.editor",
        "isExtraImport": true,
        "detail": "moviepy.editor",
        "documentation": {}
    },
    {
        "label": "ImageSequenceClip",
        "importPath": "moviepy.editor",
        "description": "moviepy.editor",
        "isExtraImport": true,
        "detail": "moviepy.editor",
        "documentation": {}
    },
    {
        "label": "AudioFileClip",
        "importPath": "moviepy.editor",
        "description": "moviepy.editor",
        "isExtraImport": true,
        "detail": "moviepy.editor",
        "documentation": {}
    },
    {
        "label": "concatenate_videoclips",
        "importPath": "moviepy.editor",
        "description": "moviepy.editor",
        "isExtraImport": true,
        "detail": "moviepy.editor",
        "documentation": {}
    },
    {
        "label": "CompositeVideoClip",
        "importPath": "moviepy.editor",
        "description": "moviepy.editor",
        "isExtraImport": true,
        "detail": "moviepy.editor",
        "documentation": {}
    },
    {
        "label": "soundfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "soundfile",
        "description": "soundfile",
        "detail": "soundfile",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "urllib3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib3",
        "description": "urllib3",
        "detail": "urllib3",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "ID3",
        "importPath": "mutagen.id3",
        "description": "mutagen.id3",
        "isExtraImport": true,
        "detail": "mutagen.id3",
        "documentation": {}
    },
    {
        "label": "TIT2",
        "importPath": "mutagen.id3",
        "description": "mutagen.id3",
        "isExtraImport": true,
        "detail": "mutagen.id3",
        "documentation": {}
    },
    {
        "label": "TPE1",
        "importPath": "mutagen.id3",
        "description": "mutagen.id3",
        "isExtraImport": true,
        "detail": "mutagen.id3",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "praw",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "praw",
        "description": "praw",
        "detail": "praw",
        "documentation": {}
    },
    {
        "label": "google.auth",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "google.auth",
        "description": "google.auth",
        "detail": "google.auth",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "google.auth.transport.requests",
        "description": "google.auth.transport.requests",
        "isExtraImport": true,
        "detail": "google.auth.transport.requests",
        "documentation": {}
    },
    {
        "label": "Credentials",
        "importPath": "google.oauth2.credentials",
        "description": "google.oauth2.credentials",
        "isExtraImport": true,
        "detail": "google.oauth2.credentials",
        "documentation": {}
    },
    {
        "label": "InstalledAppFlow",
        "importPath": "google_auth_oauthlib.flow",
        "description": "google_auth_oauthlib.flow",
        "isExtraImport": true,
        "detail": "google_auth_oauthlib.flow",
        "documentation": {}
    },
    {
        "label": "build",
        "importPath": "googleapiclient.discovery",
        "description": "googleapiclient.discovery",
        "isExtraImport": true,
        "detail": "googleapiclient.discovery",
        "documentation": {}
    },
    {
        "label": "MediaFileUpload",
        "importPath": "googleapiclient.http",
        "description": "googleapiclient.http",
        "isExtraImport": true,
        "detail": "googleapiclient.http",
        "documentation": {}
    },
    {
        "label": "fadein",
        "importPath": "moviepy.video.fx.all",
        "description": "moviepy.video.fx.all",
        "isExtraImport": true,
        "detail": "moviepy.video.fx.all",
        "documentation": {}
    },
    {
        "label": "fadeout",
        "importPath": "moviepy.video.fx.all",
        "description": "moviepy.video.fx.all",
        "isExtraImport": true,
        "detail": "moviepy.video.fx.all",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "create_content",
        "importPath": "REDDIT.GENERATE_REDDIT",
        "description": "REDDIT.GENERATE_REDDIT",
        "isExtraImport": true,
        "detail": "REDDIT.GENERATE_REDDIT",
        "documentation": {}
    },
    {
        "label": "create_content",
        "importPath": "REDDIT.GENERATE_REDDIT",
        "description": "REDDIT.GENERATE_REDDIT",
        "isExtraImport": true,
        "detail": "REDDIT.GENERATE_REDDIT",
        "documentation": {}
    },
    {
        "label": "create_conversation",
        "importPath": "LLM.GENERATE_PODCUST",
        "description": "LLM.GENERATE_PODCUST",
        "isExtraImport": true,
        "detail": "LLM.GENERATE_PODCUST",
        "documentation": {}
    },
    {
        "label": "send_prompt",
        "importPath": "LLM.GENERATE_PODCUST",
        "description": "LLM.GENERATE_PODCUST",
        "isExtraImport": true,
        "detail": "LLM.GENERATE_PODCUST",
        "documentation": {}
    },
    {
        "label": "create_conversation",
        "importPath": "LLM.GENERATE_PODCUST",
        "description": "LLM.GENERATE_PODCUST",
        "isExtraImport": true,
        "detail": "LLM.GENERATE_PODCUST",
        "documentation": {}
    },
    {
        "label": "send_prompt",
        "importPath": "LLM.GENERATE_PODCUST",
        "description": "LLM.GENERATE_PODCUST",
        "isExtraImport": true,
        "detail": "LLM.GENERATE_PODCUST",
        "documentation": {}
    },
    {
        "label": "create_audios",
        "importPath": "AUDIO.GENERATE_AUDIO",
        "description": "AUDIO.GENERATE_AUDIO",
        "isExtraImport": true,
        "detail": "AUDIO.GENERATE_AUDIO",
        "documentation": {}
    },
    {
        "label": "create_one_audio",
        "importPath": "AUDIO.GENERATE_AUDIO",
        "description": "AUDIO.GENERATE_AUDIO",
        "isExtraImport": true,
        "detail": "AUDIO.GENERATE_AUDIO",
        "documentation": {}
    },
    {
        "label": "mix_podcust_audio",
        "importPath": "AUDIO.GENERATE_AUDIO",
        "description": "AUDIO.GENERATE_AUDIO",
        "isExtraImport": true,
        "detail": "AUDIO.GENERATE_AUDIO",
        "documentation": {}
    },
    {
        "label": "create_audios",
        "importPath": "AUDIO.GENERATE_AUDIO",
        "description": "AUDIO.GENERATE_AUDIO",
        "isExtraImport": true,
        "detail": "AUDIO.GENERATE_AUDIO",
        "documentation": {}
    },
    {
        "label": "create_one_audio",
        "importPath": "AUDIO.GENERATE_AUDIO",
        "description": "AUDIO.GENERATE_AUDIO",
        "isExtraImport": true,
        "detail": "AUDIO.GENERATE_AUDIO",
        "documentation": {}
    },
    {
        "label": "mix_podcust_audio",
        "importPath": "AUDIO.GENERATE_AUDIO",
        "description": "AUDIO.GENERATE_AUDIO",
        "isExtraImport": true,
        "detail": "AUDIO.GENERATE_AUDIO",
        "documentation": {}
    },
    {
        "label": "generate_music",
        "importPath": "MUSIC.GENERATE_MUSIC",
        "description": "MUSIC.GENERATE_MUSIC",
        "isExtraImport": true,
        "detail": "MUSIC.GENERATE_MUSIC",
        "documentation": {}
    },
    {
        "label": "generate_music",
        "importPath": "MUSIC.GENERATE_MUSIC",
        "description": "MUSIC.GENERATE_MUSIC",
        "isExtraImport": true,
        "detail": "MUSIC.GENERATE_MUSIC",
        "documentation": {}
    },
    {
        "label": "fix_music",
        "importPath": "MUSIC.FIX_MUSIC",
        "description": "MUSIC.FIX_MUSIC",
        "isExtraImport": true,
        "detail": "MUSIC.FIX_MUSIC",
        "documentation": {}
    },
    {
        "label": "fix_music",
        "importPath": "MUSIC.FIX_MUSIC",
        "description": "MUSIC.FIX_MUSIC",
        "isExtraImport": true,
        "detail": "MUSIC.FIX_MUSIC",
        "documentation": {}
    },
    {
        "label": "create_images_prompts",
        "importPath": "IMAGE.GENERATE_IMAGES",
        "description": "IMAGE.GENERATE_IMAGES",
        "isExtraImport": true,
        "detail": "IMAGE.GENERATE_IMAGES",
        "documentation": {}
    },
    {
        "label": "create_images",
        "importPath": "IMAGE.GENERATE_IMAGES",
        "description": "IMAGE.GENERATE_IMAGES",
        "isExtraImport": true,
        "detail": "IMAGE.GENERATE_IMAGES",
        "documentation": {}
    },
    {
        "label": "create_images_prompts",
        "importPath": "IMAGE.GENERATE_IMAGES",
        "description": "IMAGE.GENERATE_IMAGES",
        "isExtraImport": true,
        "detail": "IMAGE.GENERATE_IMAGES",
        "documentation": {}
    },
    {
        "label": "create_images",
        "importPath": "IMAGE.GENERATE_IMAGES",
        "description": "IMAGE.GENERATE_IMAGES",
        "isExtraImport": true,
        "detail": "IMAGE.GENERATE_IMAGES",
        "documentation": {}
    },
    {
        "label": "generate_video",
        "importPath": "VIDEO.GENERATE_VIDEO",
        "description": "VIDEO.GENERATE_VIDEO",
        "isExtraImport": true,
        "detail": "VIDEO.GENERATE_VIDEO",
        "documentation": {}
    },
    {
        "label": "generate_video",
        "importPath": "VIDEO.GENERATE_VIDEO",
        "description": "VIDEO.GENERATE_VIDEO",
        "isExtraImport": true,
        "detail": "VIDEO.GENERATE_VIDEO",
        "documentation": {}
    },
    {
        "label": "share_video",
        "importPath": "UPLOAD.SHARE_VIDEO",
        "description": "UPLOAD.SHARE_VIDEO",
        "isExtraImport": true,
        "detail": "UPLOAD.SHARE_VIDEO",
        "documentation": {}
    },
    {
        "label": "split_infos",
        "importPath": "UPLOAD.SHARE_VIDEO",
        "description": "UPLOAD.SHARE_VIDEO",
        "isExtraImport": true,
        "detail": "UPLOAD.SHARE_VIDEO",
        "documentation": {}
    },
    {
        "label": "get_authenticated_service",
        "importPath": "UPLOAD.SHARE_VIDEO",
        "description": "UPLOAD.SHARE_VIDEO",
        "isExtraImport": true,
        "detail": "UPLOAD.SHARE_VIDEO",
        "documentation": {}
    },
    {
        "label": "share_video",
        "importPath": "UPLOAD.SHARE_VIDEO",
        "description": "UPLOAD.SHARE_VIDEO",
        "isExtraImport": true,
        "detail": "UPLOAD.SHARE_VIDEO",
        "documentation": {}
    },
    {
        "label": "split_infos",
        "importPath": "UPLOAD.SHARE_VIDEO",
        "description": "UPLOAD.SHARE_VIDEO",
        "isExtraImport": true,
        "detail": "UPLOAD.SHARE_VIDEO",
        "documentation": {}
    },
    {
        "label": "get_authenticated_service",
        "importPath": "UPLOAD.SHARE_VIDEO",
        "description": "UPLOAD.SHARE_VIDEO",
        "isExtraImport": true,
        "detail": "UPLOAD.SHARE_VIDEO",
        "documentation": {}
    },
    {
        "label": "scipy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "scipy",
        "description": "scipy",
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "generate_audio",
        "kind": 2,
        "importPath": "AUDIO.GENERATE_AUDIO",
        "description": "AUDIO.GENERATE_AUDIO",
        "peekOfCode": "def generate_audio(text, voice_id, proxy):\n    url = f\"https://api.elevenlabs.io/v1/text-to-speech/{voice_id}?allow_unauthenticated=1\"\n    headers = {\n        \"Accept\": \"audio/mpeg\",\n        \"Content-Type\": \"application/json\",\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/119.0\",  # Mimic Firefox\n        \"Accept-Language\": \"en-US,en;q=0.5\",\n        \"Accept-Encoding\": \"gzip, deflate, br\",\n        \"Connection\": \"keep-alive\",\n        \"Referer\": \"https://elevenlabs.io/\",",
        "detail": "AUDIO.GENERATE_AUDIO",
        "documentation": {}
    },
    {
        "label": "make_shorter",
        "kind": 2,
        "importPath": "AUDIO.GENERATE_AUDIO",
        "description": "AUDIO.GENERATE_AUDIO",
        "peekOfCode": "def make_shorter(tst):\n    if len(tst)>500:\n        tst = tst.replace(\"<speak>\",\"\")\n        tst = tst.replace(\"</speak>\",\"\")\n        print(\"remove by <speak> and </speak> \")\n    if len(tst)>500:\n        tst = tst.replace(\"<prosody rate='slow'>\",\"\")\n        print(\"remove by <prosody rate='slow'> \")\n    if len(tst)>500:\n        tst = tst.replace(\"</prosody>\",\"\")",
        "detail": "AUDIO.GENERATE_AUDIO",
        "documentation": {}
    },
    {
        "label": "save_files",
        "kind": 2,
        "importPath": "AUDIO.GENERATE_AUDIO",
        "description": "AUDIO.GENERATE_AUDIO",
        "peekOfCode": "def save_files(audio_segments):\n    audio_paths = []\n    for i, segment in enumerate(audio_segments):\n        with open(f\"podcast/segment_{i}.mp3\", \"wb\") as f:\n            f.write(segment)\n        print(f\"Saved pudcast/segment_{i}.mp3\")\n        audio_paths.append(f\"podcast/segment_{i}.mp3\")\n    return audio_paths\n# Create all audios\ndef create_audios(conversation_list,proxies,VOICE_ID_MAN,VOICE_ID_WOMAN):",
        "detail": "AUDIO.GENERATE_AUDIO",
        "documentation": {}
    },
    {
        "label": "create_audios",
        "kind": 2,
        "importPath": "AUDIO.GENERATE_AUDIO",
        "description": "AUDIO.GENERATE_AUDIO",
        "peekOfCode": "def create_audios(conversation_list,proxies,VOICE_ID_MAN,VOICE_ID_WOMAN):\n    # Generate audio for each chunk and combine\n    audio_segments = []\n    for i, turn in enumerate(conversation_list):\n        role = turn[\"role\"]\n        text = turn[\"text\"]\n        text = make_shorter(text)\n        #voice_id = VOICE_ID_MAN if role == \"Man\" else VOICE_ID_WOMAN\n        voice_id = VOICE_ID_MAN if i % 2 == 0 else VOICE_ID_WOMAN\n        print(f\"Generating audio for {role} : {voice_id} (turn {i + 1})...\")",
        "detail": "AUDIO.GENERATE_AUDIO",
        "documentation": {}
    },
    {
        "label": "create_one_audio",
        "kind": 2,
        "importPath": "AUDIO.GENERATE_AUDIO",
        "description": "AUDIO.GENERATE_AUDIO",
        "peekOfCode": "def create_one_audio(audios_list,OUTPUT_FILE):\n    # Load and combine all audio files\n    combined = []\n    for file in audios_list:\n        y, sr = librosa.load(file)\n        combined.append(y)\n    # Concatenate all audio segments\n    final_audio = np.concatenate(combined)\n    # Save the combined audio\n    sf.write(OUTPUT_FILE, final_audio, sr)",
        "detail": "AUDIO.GENERATE_AUDIO",
        "documentation": {}
    },
    {
        "label": "mix_podcust_audio",
        "kind": 2,
        "importPath": "AUDIO.GENERATE_AUDIO",
        "description": "AUDIO.GENERATE_AUDIO",
        "peekOfCode": "def mix_podcust_audio(path_podcust_audio,path_fixed):\n    path_mixed = \"podcast/mixed_podcast.mp3\"\n    # Load the podcast audio (MP3)\n    podcast = AudioFileClip(path_podcust_audio)\n    print(\"Podcast duration:\", podcast.duration)\n    # Load the background music (WAV or MP3)\n    music = AudioFileClip(path_fixed)\n    print(\"Music duration:\", music.duration)\n    # Adjust the volume of the background music (optional)\n    music = music.volumex(0.5)  # Reduce volume by 50%",
        "detail": "AUDIO.GENERATE_AUDIO",
        "documentation": {}
    },
    {
        "label": "create_images_prompts",
        "kind": 2,
        "importPath": "IMAGE.GENERATE_IMAGES",
        "description": "IMAGE.GENERATE_IMAGES",
        "peekOfCode": "def create_images_prompts(res):\n    # Split the input text into individual prompts\n    prompts_list = [line.strip() for line in res.split(\"\\n\") if line.strip()]\n    # Remove the numbering (e.g., \"1. \", \"2. \") from each prompt\n    prompts_list = [prompt.split(\". \", 1)[1] for prompt in prompts_list]\n    # Output the list of prompts\n    print(prompts_list)\n    return prompts_list\ndef query(API_URL,payload, headers, retries=3, delay=10):\n    for i in range(retries):",
        "detail": "IMAGE.GENERATE_IMAGES",
        "documentation": {}
    },
    {
        "label": "query",
        "kind": 2,
        "importPath": "IMAGE.GENERATE_IMAGES",
        "description": "IMAGE.GENERATE_IMAGES",
        "peekOfCode": "def query(API_URL,payload, headers, retries=3, delay=10):\n    for i in range(retries):\n        try:\n            response = requests.post(API_URL, headers=headers, json=payload, timeout=300)\n            if response.status_code == 200:\n                return response.content\n            else:\n                print(f\"Attempt {i + 1} failed: {response.text}\")\n                if \"estimated_time\" in response.text:\n                    # Wait for the model to load",
        "detail": "IMAGE.GENERATE_IMAGES",
        "documentation": {}
    },
    {
        "label": "create_images",
        "kind": 2,
        "importPath": "IMAGE.GENERATE_IMAGES",
        "description": "IMAGE.GENERATE_IMAGES",
        "peekOfCode": "def create_images(prompts_list,IMAGE_API_URLS,HUGGING_FACE_TOKEN):\n    headers = {\"Authorization\": f\"Bearer {HUGGING_FACE_TOKEN}\"}\n    # Hugging Face API endpoints for the models\n    API_URLS = [\n        \"https://api-inference.huggingface.co/models/black-forest-labs/FLUX.1-dev\",\n        \"https://api-inference.huggingface.co/models/ZB-Tech/Text-to-Image\",\n        \"https://api-inference.huggingface.co/models/stabilityai/stable-diffusion-2\",\n    ]\n    # Generate an images\n    i=0",
        "detail": "IMAGE.GENERATE_IMAGES",
        "documentation": {}
    },
    {
        "label": "send_prompt",
        "kind": 2,
        "importPath": "LLM.GENERATE_PODCUST",
        "description": "LLM.GENERATE_PODCUST",
        "peekOfCode": "def send_prompt(prompt,text,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL):\n    headers = {\n        \"Authorization\": f\"Bearer {OPENROUTER_API_KEY}\",\n        \"Content-Type\": \"application/json\"\n    }\n    final_prompt = prompt + text\n    data = {\n        \"model\": MODEL,  # Use the free model\n        \"messages\": [\n            {\"role\": \"user\", \"content\": final_prompt}",
        "detail": "LLM.GENERATE_PODCUST",
        "documentation": {}
    },
    {
        "label": "split_conversation",
        "kind": 2,
        "importPath": "LLM.GENERATE_PODCUST",
        "description": "LLM.GENERATE_PODCUST",
        "peekOfCode": "def split_conversation(conversation):\n    turns = conversation.split(\"\\n\")\n    roles = [\"Man\", \"Woman\"]\n    conversation_list = []\n    role_index = 0\n    for turn in turns:\n        if turn.strip():  # Skip empty lines\n            role = roles[role_index % len(roles)]\n            conversation_list.append({\"role\": role, \"text\": turn.strip()})\n            role_index += 1",
        "detail": "LLM.GENERATE_PODCUST",
        "documentation": {}
    },
    {
        "label": "save_conversation",
        "kind": 2,
        "importPath": "LLM.GENERATE_PODCUST",
        "description": "LLM.GENERATE_PODCUST",
        "peekOfCode": "def save_conversation(conversation,SAVE_CONVERSATION_FILE):\n    with open(SAVE_CONVERSATION_FILE, \"w\", encoding =\"UTF-8\") as file_to_save:\n        file_to_save.write(conversation)\ndef create_conversation(prompt,text,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL):\n    # Generate the conversation\n    print(\"Generating conversation...\")\n    conversation = send_prompt(prompt,text,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\n    SAVE_CONVERSATION_FILE = \"conversation.txt\"\n    save_conversation(conversation,SAVE_CONVERSATION_FILE)\n    if not conversation:",
        "detail": "LLM.GENERATE_PODCUST",
        "documentation": {}
    },
    {
        "label": "create_conversation",
        "kind": 2,
        "importPath": "LLM.GENERATE_PODCUST",
        "description": "LLM.GENERATE_PODCUST",
        "peekOfCode": "def create_conversation(prompt,text,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL):\n    # Generate the conversation\n    print(\"Generating conversation...\")\n    conversation = send_prompt(prompt,text,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\n    SAVE_CONVERSATION_FILE = \"conversation.txt\"\n    save_conversation(conversation,SAVE_CONVERSATION_FILE)\n    if not conversation:\n        print(\"Failed to generate conversation.\")\n    # Split the conversation into a dictionary list\n    conversation_list = split_conversation(conversation)",
        "detail": "LLM.GENERATE_PODCUST",
        "documentation": {}
    },
    {
        "label": "fix_music",
        "kind": 2,
        "importPath": "MUSIC.FIX_MUSIC",
        "description": "MUSIC.FIX_MUSIC",
        "peekOfCode": "def fix_music():\n    # Input and output file paths\n    input_file = \"podcast/background.mp3\"\n    output_file = \"podcast/background_fixed.mp3\"\n    # Step 1: Convert the audio file using FFmpeg\n    ffmpeg_command = [\n        \"ffmpeg\",\n        \"-i\", input_file,          # Input file\n        \"-c:a\", \"libmp3lame\",      # Audio codec (MP3)\n        \"-q:a\", \"2\",               # Audio quality",
        "detail": "MUSIC.FIX_MUSIC",
        "documentation": {}
    },
    {
        "label": "generate_music",
        "kind": 2,
        "importPath": "MUSIC.GENERATE_MUSIC",
        "description": "MUSIC.GENERATE_MUSIC",
        "peekOfCode": "def generate_music(prompt,podcust,HUGGING_FACE_TOKEN,API_URL,file_path):\n    # Your Hugging Face API token\n    headers = {\n        \"Authorization\": f\"Bearer {HUGGING_FACE_TOKEN}\",\n        \"Content-Type\": \"application/json\"\n    }\n    # Payload with the prompt\n    payload = {\n        \"inputs\": prompt\n    }",
        "detail": "MUSIC.GENERATE_MUSIC",
        "documentation": {}
    },
    {
        "label": "load_done_subjects",
        "kind": 2,
        "importPath": "REDDIT.GENERATE_REDDIT",
        "description": "REDDIT.GENERATE_REDDIT",
        "peekOfCode": "def load_done_subjects(DONE_SUBJECTS_FILE):\n    try:\n        with open(DONE_SUBJECTS_FILE, \"r\") as file:\n            return set(file.read().splitlines())\n    except FileNotFoundError:\n        return set()\n# Function to save a new subject\ndef save_done_subject(post_id,DONE_SUBJECTS_FILE):\n    with open(DONE_SUBJECTS_FILE, \"a\") as file:\n        file.write(post_id + \"\\n\")",
        "detail": "REDDIT.GENERATE_REDDIT",
        "documentation": {}
    },
    {
        "label": "save_done_subject",
        "kind": 2,
        "importPath": "REDDIT.GENERATE_REDDIT",
        "description": "REDDIT.GENERATE_REDDIT",
        "peekOfCode": "def save_done_subject(post_id,DONE_SUBJECTS_FILE):\n    with open(DONE_SUBJECTS_FILE, \"a\") as file:\n        file.write(post_id + \"\\n\")\n# Function to save a new subject\ndef save_content(text,SAVE_CONTENT_FILE):\n    with open(SAVE_CONTENT_FILE, \"w\") as file_to_save:\n        file_to_save.write(text)\n# Create the content\ndef create_content(CLIENT_ID,CLIENT_SECRET,USER_AGENT):\n    # Initialize PRAW",
        "detail": "REDDIT.GENERATE_REDDIT",
        "documentation": {}
    },
    {
        "label": "save_content",
        "kind": 2,
        "importPath": "REDDIT.GENERATE_REDDIT",
        "description": "REDDIT.GENERATE_REDDIT",
        "peekOfCode": "def save_content(text,SAVE_CONTENT_FILE):\n    with open(SAVE_CONTENT_FILE, \"w\") as file_to_save:\n        file_to_save.write(text)\n# Create the content\ndef create_content(CLIENT_ID,CLIENT_SECRET,USER_AGENT):\n    # Initialize PRAW\n    reddit = praw.Reddit(\n        client_id=CLIENT_ID,\n        client_secret=CLIENT_SECRET,\n        user_agent=USER_AGENT",
        "detail": "REDDIT.GENERATE_REDDIT",
        "documentation": {}
    },
    {
        "label": "create_content",
        "kind": 2,
        "importPath": "REDDIT.GENERATE_REDDIT",
        "description": "REDDIT.GENERATE_REDDIT",
        "peekOfCode": "def create_content(CLIENT_ID,CLIENT_SECRET,USER_AGENT):\n    # Initialize PRAW\n    reddit = praw.Reddit(\n        client_id=CLIENT_ID,\n        client_secret=CLIENT_SECRET,\n        user_agent=USER_AGENT\n    )\n    # File to store previously fetched subjects\n    DONE_SUBJECTS_FILE = \"done_subjects.txt\"\n    SAVE_CONTENT_FILE = \"content.txt\"",
        "detail": "REDDIT.GENERATE_REDDIT",
        "documentation": {}
    },
    {
        "label": "split_infos",
        "kind": 2,
        "importPath": "UPLOAD.SHARE_VIDEO",
        "description": "UPLOAD.SHARE_VIDEO",
        "peekOfCode": "def split_infos(video_infos):\n    info = video_infos\n    title = info.split('|')[0]\n    description = info.split('|')[1]\n    tags = info.split('|')[2]\n    if ',' in tags:\n        tags = info.split('|')[2].split(\",\")\n    if '،' in tags:\n        tags = info.split('|')[2].split(\"،\")\n    return title, description, tags",
        "detail": "UPLOAD.SHARE_VIDEO",
        "documentation": {}
    },
    {
        "label": "get_authenticated_service",
        "kind": 2,
        "importPath": "UPLOAD.SHARE_VIDEO",
        "description": "UPLOAD.SHARE_VIDEO",
        "peekOfCode": "def get_authenticated_service(TOKEN_FILE_YOUTUBE):\n    creds = None\n    if TOKEN_FILE_YOUTUBE:\n        print(\"takeing Credentials ...\")\n        creds = Credentials.from_authorized_user_file(TOKEN_FILE_YOUTUBE, SCOPES)\n        print(\"i take Credentials\")\n    if not creds or not creds.valid:\n        if creds and creds.expired and creds.refresh_token:\n            creds.refresh(Request())\n        else:",
        "detail": "UPLOAD.SHARE_VIDEO",
        "documentation": {}
    },
    {
        "label": "share_video",
        "kind": 2,
        "importPath": "UPLOAD.SHARE_VIDEO",
        "description": "UPLOAD.SHARE_VIDEO",
        "peekOfCode": "def share_video(youtube, title, description, tags, video_path):\n    request_body = {\n        \"snippet\": {\n            \"categoryId\": \"22\",  # Category ID (e.g., 22 is for People & Blogs)\n            \"title\":title ,\n            \"description\":description ,\n            \"tags\": tags,\n        },\n        \"status\": {\n            \"privacyStatus\": \"public\",  # \"public\", \"unlisted\", or \"private\"",
        "detail": "UPLOAD.SHARE_VIDEO",
        "documentation": {}
    },
    {
        "label": "SCOPES",
        "kind": 5,
        "importPath": "UPLOAD.SHARE_VIDEO",
        "description": "UPLOAD.SHARE_VIDEO",
        "peekOfCode": "SCOPES = [\"https://www.googleapis.com/auth/youtube.upload\"]\ndef split_infos(video_infos):\n    info = video_infos\n    title = info.split('|')[0]\n    description = info.split('|')[1]\n    tags = info.split('|')[2]\n    if ',' in tags:\n        tags = info.split('|')[2].split(\",\")\n    if '،' in tags:\n        tags = info.split('|')[2].split(\"،\")",
        "detail": "UPLOAD.SHARE_VIDEO",
        "documentation": {}
    },
    {
        "label": "generate_video",
        "kind": 2,
        "importPath": "VIDEO.GENERATE_VIDEO",
        "description": "VIDEO.GENERATE_VIDEO",
        "peekOfCode": "def generate_video(audio_path,image_paths):\n    # Paths\n    #audio_path = \"pudcast/combined_output.mp3\"\n    #image_folder = \"images\"\n    output_video_path = \"podcast/podcast.mp4\"\n    # Get the list of image paths in order\n    # Load the audio and calculate its duration\n    audio_clip = AudioFileClip(audio_path)\n    audio_duration = audio_clip.duration  # Total duration of the audio in seconds\n    # Calculate the duration for each image",
        "detail": "VIDEO.GENERATE_VIDEO",
        "documentation": {}
    },
    {
        "label": "delete_files",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def delete_files(file_list):\n    \"\"\"\n    Deletes a list of files.\n    Args:\n        file_list (list): A list of file paths to delete.\n    \"\"\"\n    for file_path in file_list:\n        try:\n            # Check if the file exists\n            if os.path.exists(file_path):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "generated_paths",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "generated_paths = []\n# Access the variables\nCLIENT_ID = os.getenv(\"CLIENT_ID\")\nCLIENT_SECRET = os.getenv(\"CLIENT_SECRET\")\nUSER_AGENT = os.getenv(\"USER_AGENT\")\n# Create text from reddit\nprint(\"creating text from reddit .....\")\ntext = create_content(CLIENT_ID,CLIENT_SECRET,USER_AGENT)\nprint(\"text from reddit created\")\ntime.sleep(5)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "CLIENT_ID = os.getenv(\"CLIENT_ID\")\nCLIENT_SECRET = os.getenv(\"CLIENT_SECRET\")\nUSER_AGENT = os.getenv(\"USER_AGENT\")\n# Create text from reddit\nprint(\"creating text from reddit .....\")\ntext = create_content(CLIENT_ID,CLIENT_SECRET,USER_AGENT)\nprint(\"text from reddit created\")\ntime.sleep(5)\n# Access the variables\nOPENROUTER_API_KEY = os.getenv(\"OPENROUTER_API_KEY\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "CLIENT_SECRET = os.getenv(\"CLIENT_SECRET\")\nUSER_AGENT = os.getenv(\"USER_AGENT\")\n# Create text from reddit\nprint(\"creating text from reddit .....\")\ntext = create_content(CLIENT_ID,CLIENT_SECRET,USER_AGENT)\nprint(\"text from reddit created\")\ntime.sleep(5)\n# Access the variables\nOPENROUTER_API_KEY = os.getenv(\"OPENROUTER_API_KEY\")\nOPENROUTER_API_URL = os.getenv(\"OPENROUTER_API_URL\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "USER_AGENT",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "USER_AGENT = os.getenv(\"USER_AGENT\")\n# Create text from reddit\nprint(\"creating text from reddit .....\")\ntext = create_content(CLIENT_ID,CLIENT_SECRET,USER_AGENT)\nprint(\"text from reddit created\")\ntime.sleep(5)\n# Access the variables\nOPENROUTER_API_KEY = os.getenv(\"OPENROUTER_API_KEY\")\nOPENROUTER_API_URL = os.getenv(\"OPENROUTER_API_URL\")\nMODEL = os.getenv(\"MODEL\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "text = create_content(CLIENT_ID,CLIENT_SECRET,USER_AGENT)\nprint(\"text from reddit created\")\ntime.sleep(5)\n# Access the variables\nOPENROUTER_API_KEY = os.getenv(\"OPENROUTER_API_KEY\")\nOPENROUTER_API_URL = os.getenv(\"OPENROUTER_API_URL\")\nMODEL = os.getenv(\"MODEL\")\nconversation_prompt = open(\"PROMPTS/conversation_prompt.txt\", \"r\", encoding =\"UTF-8\").read()\ntime.sleep(5)\n# Create the conversation",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "OPENROUTER_API_KEY",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "OPENROUTER_API_KEY = os.getenv(\"OPENROUTER_API_KEY\")\nOPENROUTER_API_URL = os.getenv(\"OPENROUTER_API_URL\")\nMODEL = os.getenv(\"MODEL\")\nconversation_prompt = open(\"PROMPTS/conversation_prompt.txt\", \"r\", encoding =\"UTF-8\").read()\ntime.sleep(5)\n# Create the conversation\nprint(\"creating conversation ....\")\nconversation_list = create_conversation(conversation_prompt,text,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\nprint(\"conversation created by llm\")\ntime.sleep(5)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "OPENROUTER_API_URL",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "OPENROUTER_API_URL = os.getenv(\"OPENROUTER_API_URL\")\nMODEL = os.getenv(\"MODEL\")\nconversation_prompt = open(\"PROMPTS/conversation_prompt.txt\", \"r\", encoding =\"UTF-8\").read()\ntime.sleep(5)\n# Create the conversation\nprint(\"creating conversation ....\")\nconversation_list = create_conversation(conversation_prompt,text,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\nprint(\"conversation created by llm\")\ntime.sleep(5)\n# Access the variables",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "MODEL",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "MODEL = os.getenv(\"MODEL\")\nconversation_prompt = open(\"PROMPTS/conversation_prompt.txt\", \"r\", encoding =\"UTF-8\").read()\ntime.sleep(5)\n# Create the conversation\nprint(\"creating conversation ....\")\nconversation_list = create_conversation(conversation_prompt,text,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\nprint(\"conversation created by llm\")\ntime.sleep(5)\n# Access the variables\nVOICE_ID_MAN = os.getenv(\"VOICE_ID_MAN\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "conversation_prompt",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "conversation_prompt = open(\"PROMPTS/conversation_prompt.txt\", \"r\", encoding =\"UTF-8\").read()\ntime.sleep(5)\n# Create the conversation\nprint(\"creating conversation ....\")\nconversation_list = create_conversation(conversation_prompt,text,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\nprint(\"conversation created by llm\")\ntime.sleep(5)\n# Access the variables\nVOICE_ID_MAN = os.getenv(\"VOICE_ID_MAN\")\nVOICE_ID_WOMAN = os.getenv(\"VOICE_ID_WOMAN\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "conversation_list",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "conversation_list = create_conversation(conversation_prompt,text,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\nprint(\"conversation created by llm\")\ntime.sleep(5)\n# Access the variables\nVOICE_ID_MAN = os.getenv(\"VOICE_ID_MAN\")\nVOICE_ID_WOMAN = os.getenv(\"VOICE_ID_WOMAN\")\n# Load the proxies from the JSON file\nprint(\"Loading Proxies ....\")\nwith open(\"proxies.json\", \"r\") as file:\n    proxies = json.load(file)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "VOICE_ID_MAN",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "VOICE_ID_MAN = os.getenv(\"VOICE_ID_MAN\")\nVOICE_ID_WOMAN = os.getenv(\"VOICE_ID_WOMAN\")\n# Load the proxies from the JSON file\nprint(\"Loading Proxies ....\")\nwith open(\"proxies.json\", \"r\") as file:\n    proxies = json.load(file)\nprint(\"Proxies loaded\")\nprint(\"creating podcust audios, wait for finish ....\")\naudios_list = create_audios(conversation_list,proxies,VOICE_ID_MAN,VOICE_ID_WOMAN)\nprint(\"podcust audios created\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "VOICE_ID_WOMAN",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "VOICE_ID_WOMAN = os.getenv(\"VOICE_ID_WOMAN\")\n# Load the proxies from the JSON file\nprint(\"Loading Proxies ....\")\nwith open(\"proxies.json\", \"r\") as file:\n    proxies = json.load(file)\nprint(\"Proxies loaded\")\nprint(\"creating podcust audios, wait for finish ....\")\naudios_list = create_audios(conversation_list,proxies,VOICE_ID_MAN,VOICE_ID_WOMAN)\nprint(\"podcust audios created\")\ntime.sleep(5)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "audios_list",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "audios_list = create_audios(conversation_list,proxies,VOICE_ID_MAN,VOICE_ID_WOMAN)\nprint(\"podcust audios created\")\ntime.sleep(5)\n# create one audio\nAUDIO_OUTPUT_FILE = os.getenv(\"AUDIO_OUTPUT_FILE\")\nprint(\"generating one audio ...\")\npath_podcust_audio = create_one_audio(audios_list,AUDIO_OUTPUT_FILE)\nprint(\"one audio generated\")\ntime.sleep(5)\n# create music background",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "AUDIO_OUTPUT_FILE",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "AUDIO_OUTPUT_FILE = os.getenv(\"AUDIO_OUTPUT_FILE\")\nprint(\"generating one audio ...\")\npath_podcust_audio = create_one_audio(audios_list,AUDIO_OUTPUT_FILE)\nprint(\"one audio generated\")\ntime.sleep(5)\n# create music background\nHUGGING_FACE_TOKEN = os.getenv(\"HUGGING_FACE_TOKEN\")\nMUSIC_API_URL = os.getenv(\"MUSIC_API_URL\")\nllm_music_prompt = open(\"PROMPTS/music_prompt.txt\", \"r\", encoding =\"UTF-8\").read()\nconversation = open(\"conversation.txt\", \"r\", encoding =\"UTF-8\").read()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "path_podcust_audio",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "path_podcust_audio = create_one_audio(audios_list,AUDIO_OUTPUT_FILE)\nprint(\"one audio generated\")\ntime.sleep(5)\n# create music background\nHUGGING_FACE_TOKEN = os.getenv(\"HUGGING_FACE_TOKEN\")\nMUSIC_API_URL = os.getenv(\"MUSIC_API_URL\")\nllm_music_prompt = open(\"PROMPTS/music_prompt.txt\", \"r\", encoding =\"UTF-8\").read()\nconversation = open(\"conversation.txt\", \"r\", encoding =\"UTF-8\").read()\nprint(\"generating prompt music ...\")\nmusic_prompt = send_prompt(llm_music_prompt,conversation,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "HUGGING_FACE_TOKEN",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "HUGGING_FACE_TOKEN = os.getenv(\"HUGGING_FACE_TOKEN\")\nMUSIC_API_URL = os.getenv(\"MUSIC_API_URL\")\nllm_music_prompt = open(\"PROMPTS/music_prompt.txt\", \"r\", encoding =\"UTF-8\").read()\nconversation = open(\"conversation.txt\", \"r\", encoding =\"UTF-8\").read()\nprint(\"generating prompt music ...\")\nmusic_prompt = send_prompt(llm_music_prompt,conversation,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\nprint(\"prompt music generated\")\ntime.sleep(1)\nprint(\"generating music ....\")\npath_music = generate_music(music_prompt,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "MUSIC_API_URL",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "MUSIC_API_URL = os.getenv(\"MUSIC_API_URL\")\nllm_music_prompt = open(\"PROMPTS/music_prompt.txt\", \"r\", encoding =\"UTF-8\").read()\nconversation = open(\"conversation.txt\", \"r\", encoding =\"UTF-8\").read()\nprint(\"generating prompt music ...\")\nmusic_prompt = send_prompt(llm_music_prompt,conversation,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\nprint(\"prompt music generated\")\ntime.sleep(1)\nprint(\"generating music ....\")\npath_music = generate_music(music_prompt,\n                conversation,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "llm_music_prompt",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "llm_music_prompt = open(\"PROMPTS/music_prompt.txt\", \"r\", encoding =\"UTF-8\").read()\nconversation = open(\"conversation.txt\", \"r\", encoding =\"UTF-8\").read()\nprint(\"generating prompt music ...\")\nmusic_prompt = send_prompt(llm_music_prompt,conversation,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\nprint(\"prompt music generated\")\ntime.sleep(1)\nprint(\"generating music ....\")\npath_music = generate_music(music_prompt,\n                conversation,\n                HUGGING_FACE_TOKEN,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "conversation",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "conversation = open(\"conversation.txt\", \"r\", encoding =\"UTF-8\").read()\nprint(\"generating prompt music ...\")\nmusic_prompt = send_prompt(llm_music_prompt,conversation,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\nprint(\"prompt music generated\")\ntime.sleep(1)\nprint(\"generating music ....\")\npath_music = generate_music(music_prompt,\n                conversation,\n                HUGGING_FACE_TOKEN,\n                MUSIC_API_URL,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "music_prompt",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "music_prompt = send_prompt(llm_music_prompt,conversation,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\nprint(\"prompt music generated\")\ntime.sleep(1)\nprint(\"generating music ....\")\npath_music = generate_music(music_prompt,\n                conversation,\n                HUGGING_FACE_TOKEN,\n                MUSIC_API_URL,\n                \"podcast/background.mp3\")\nprint(\"music generated\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "path_music",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "path_music = generate_music(music_prompt,\n                conversation,\n                HUGGING_FACE_TOKEN,\n                MUSIC_API_URL,\n                \"podcast/background.mp3\")\nprint(\"music generated\")\ntime.sleep(5)\n# fix music (adding metadata)\nprint(\"FIXING BACKGROUND ....\")\npath_fixed = fix_music()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "path_fixed",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "path_fixed = fix_music()\nprint(\"music fixed\")\ntime.sleep(5)\n# mix music with audio \nprint(\"MIXING PODCUST ...\")\npath_mixed_audio = mix_podcust_audio(path_podcust_audio,path_fixed)\nprint(\"podcast mixed\")\ntime.sleep(5)\n# generate images\n# Get the IMAGE_API_URLS from the .env file",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "path_mixed_audio",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "path_mixed_audio = mix_podcust_audio(path_podcust_audio,path_fixed)\nprint(\"podcast mixed\")\ntime.sleep(5)\n# generate images\n# Get the IMAGE_API_URLS from the .env file\nimage_api_urls_str = os.getenv(\"IMAGE_API_URLS\")\nIMAGE_API_URLS = image_api_urls_str.split(\",\")\nllm_images_prompt = open(\"PROMPTS/images_prompt.txt\", \"r\", encoding =\"UTF-8\").read()\nprint('generating prompts of images....')\nimages_prompt = send_prompt(llm_images_prompt,conversation,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "image_api_urls_str",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "image_api_urls_str = os.getenv(\"IMAGE_API_URLS\")\nIMAGE_API_URLS = image_api_urls_str.split(\",\")\nllm_images_prompt = open(\"PROMPTS/images_prompt.txt\", \"r\", encoding =\"UTF-8\").read()\nprint('generating prompts of images....')\nimages_prompt = send_prompt(llm_images_prompt,conversation,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\nprint('prompts generated')\nprint('generating prompts list ...')\nprompts_list = create_images_prompts(images_prompt)\nprint('prompts list generated')\ntime.sleep(1)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "IMAGE_API_URLS",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "IMAGE_API_URLS = image_api_urls_str.split(\",\")\nllm_images_prompt = open(\"PROMPTS/images_prompt.txt\", \"r\", encoding =\"UTF-8\").read()\nprint('generating prompts of images....')\nimages_prompt = send_prompt(llm_images_prompt,conversation,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\nprint('prompts generated')\nprint('generating prompts list ...')\nprompts_list = create_images_prompts(images_prompt)\nprint('prompts list generated')\ntime.sleep(1)\nprint(\"wait, generating images ........\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "llm_images_prompt",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "llm_images_prompt = open(\"PROMPTS/images_prompt.txt\", \"r\", encoding =\"UTF-8\").read()\nprint('generating prompts of images....')\nimages_prompt = send_prompt(llm_images_prompt,conversation,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\nprint('prompts generated')\nprint('generating prompts list ...')\nprompts_list = create_images_prompts(images_prompt)\nprint('prompts list generated')\ntime.sleep(1)\nprint(\"wait, generating images ........\")\npath_created_images = create_images(prompts_list,IMAGE_API_URLS,HUGGING_FACE_TOKEN)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "images_prompt",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "images_prompt = send_prompt(llm_images_prompt,conversation,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\nprint('prompts generated')\nprint('generating prompts list ...')\nprompts_list = create_images_prompts(images_prompt)\nprint('prompts list generated')\ntime.sleep(1)\nprint(\"wait, generating images ........\")\npath_created_images = create_images(prompts_list,IMAGE_API_URLS,HUGGING_FACE_TOKEN)\nprint(\"images generated\")\ntime.sleep(3)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "prompts_list",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "prompts_list = create_images_prompts(images_prompt)\nprint('prompts list generated')\ntime.sleep(1)\nprint(\"wait, generating images ........\")\npath_created_images = create_images(prompts_list,IMAGE_API_URLS,HUGGING_FACE_TOKEN)\nprint(\"images generated\")\ntime.sleep(3)\n# generate vedios\nprint(\"generating the video .....\")\noutput_video_path = generate_video(path_mixed_audio, path_created_images)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "path_created_images",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "path_created_images = create_images(prompts_list,IMAGE_API_URLS,HUGGING_FACE_TOKEN)\nprint(\"images generated\")\ntime.sleep(3)\n# generate vedios\nprint(\"generating the video .....\")\noutput_video_path = generate_video(path_mixed_audio, path_created_images)\nprint(\"video generated\")\ntime.sleep(3)\ngenerated_paths.append(path_podcust_audio)#\ngenerated_paths.append(audios_list)#",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "output_video_path",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "output_video_path = generate_video(path_mixed_audio, path_created_images)\nprint(\"video generated\")\ntime.sleep(3)\ngenerated_paths.append(path_podcust_audio)#\ngenerated_paths.append(audios_list)#\ngenerated_paths.append(path_music)#\ngenerated_paths.append(path_fixed)#\ngenerated_paths.append(path_mixed_audio)#\ngenerated_paths.extend(path_created_images)#\ngenerated_paths.append(output_video_path)#",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "UPLOAD_TO_YOUTUBE",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "UPLOAD_TO_YOUTUBE = os.getenv(\"UPLOAD_TO_YOUTUBE\")\nTOKEN_FILE_YOUTUBE = os.getenv(\"TOKEN_FILE_YOUTUBE\")\nshare_prompt = open(\"PROMPTS/share_prompt.txt\", \"r\", encoding =\"UTF-8\").read()\nprint('sharing is :', UPLOAD_TO_YOUTUBE)\nif UPLOAD_TO_YOUTUBE == \"ON\":\n    print(\"generating infos ....\")\n    video_infos = send_prompt(share_prompt,conversation,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\n    title, description, tags = split_infos(video_infos)\n    print(\"title, description, tags generated\")\n    time.sleep(1)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "TOKEN_FILE_YOUTUBE",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "TOKEN_FILE_YOUTUBE = os.getenv(\"TOKEN_FILE_YOUTUBE\")\nshare_prompt = open(\"PROMPTS/share_prompt.txt\", \"r\", encoding =\"UTF-8\").read()\nprint('sharing is :', UPLOAD_TO_YOUTUBE)\nif UPLOAD_TO_YOUTUBE == \"ON\":\n    print(\"generating infos ....\")\n    video_infos = send_prompt(share_prompt,conversation,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\n    title, description, tags = split_infos(video_infos)\n    print(\"title, description, tags generated\")\n    time.sleep(1)\n    with open(\"video_infos.txt\", \"w\", encoding =\"UTF-8\") as file:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "share_prompt",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "share_prompt = open(\"PROMPTS/share_prompt.txt\", \"r\", encoding =\"UTF-8\").read()\nprint('sharing is :', UPLOAD_TO_YOUTUBE)\nif UPLOAD_TO_YOUTUBE == \"ON\":\n    print(\"generating infos ....\")\n    video_infos = send_prompt(share_prompt,conversation,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\n    title, description, tags = split_infos(video_infos)\n    print(\"title, description, tags generated\")\n    time.sleep(1)\n    with open(\"video_infos.txt\", \"w\", encoding =\"UTF-8\") as file:\n        content = f\"\"\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "CLIENT_ID = os.getenv(\"CLIENT_ID\")\nCLIENT_SECRET = os.getenv(\"CLIENT_SECRET\")\nUSER_AGENT = os.getenv(\"USER_AGENT\")\n# Example usage\nprint(f\"Client ID: {CLIENT_ID}\")\nprint(f\"Client Secret: {CLIENT_SECRET}\")\nprint(f\"User Agent: {USER_AGENT}\")\n# Create text from reddit\n#text = create_content(CLIENT_ID,CLIENT_SECRET,USER_AGENT)\nprint(\"text from reddit created\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "CLIENT_SECRET = os.getenv(\"CLIENT_SECRET\")\nUSER_AGENT = os.getenv(\"USER_AGENT\")\n# Example usage\nprint(f\"Client ID: {CLIENT_ID}\")\nprint(f\"Client Secret: {CLIENT_SECRET}\")\nprint(f\"User Agent: {USER_AGENT}\")\n# Create text from reddit\n#text = create_content(CLIENT_ID,CLIENT_SECRET,USER_AGENT)\nprint(\"text from reddit created\")\n# Access the variables",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "USER_AGENT",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "USER_AGENT = os.getenv(\"USER_AGENT\")\n# Example usage\nprint(f\"Client ID: {CLIENT_ID}\")\nprint(f\"Client Secret: {CLIENT_SECRET}\")\nprint(f\"User Agent: {USER_AGENT}\")\n# Create text from reddit\n#text = create_content(CLIENT_ID,CLIENT_SECRET,USER_AGENT)\nprint(\"text from reddit created\")\n# Access the variables\nOPENROUTER_API_KEY = os.getenv(\"OPENROUTER_API_KEY\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "#text",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "#text = create_content(CLIENT_ID,CLIENT_SECRET,USER_AGENT)\nprint(\"text from reddit created\")\n# Access the variables\nOPENROUTER_API_KEY = os.getenv(\"OPENROUTER_API_KEY\")\nOPENROUTER_API_URL = os.getenv(\"OPENROUTER_API_URL\")\nMODEL = os.getenv(\"MODEL\")\nconversation_prompt = open(\"PROMPTS/conversation_prompt.txt\", \"r\", encoding =\"UTF-8\").read()\n# Create the conversation\n#conversation_list = create_conversation(conversation_prompt,text,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\nprint(\"conversation created by llm\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "OPENROUTER_API_KEY",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "OPENROUTER_API_KEY = os.getenv(\"OPENROUTER_API_KEY\")\nOPENROUTER_API_URL = os.getenv(\"OPENROUTER_API_URL\")\nMODEL = os.getenv(\"MODEL\")\nconversation_prompt = open(\"PROMPTS/conversation_prompt.txt\", \"r\", encoding =\"UTF-8\").read()\n# Create the conversation\n#conversation_list = create_conversation(conversation_prompt,text,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\nprint(\"conversation created by llm\")\nprint(\"START !!!!!!!!!!!!!!!!!!!!!!!!!!\")\nconversation_list = [{'role': 'Man',\n  'text': \"<speak><prosody rate='slow'>مرحبًا بالجميع،</prosody> <break time='1s'/> اليوم سنتحدث عن شيء مثير للاهتمام. <break time='1s'/> أنا محمد، مؤثر في مجال النشر الرقمي والسياسي. بالنسبة لي، هذا الموضوع يعني تغيرات هائلة في السياسة والمجتمع الأمريكي. ماذا يعني لكِ، آمنة؟</speak>\"},",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "OPENROUTER_API_URL",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "OPENROUTER_API_URL = os.getenv(\"OPENROUTER_API_URL\")\nMODEL = os.getenv(\"MODEL\")\nconversation_prompt = open(\"PROMPTS/conversation_prompt.txt\", \"r\", encoding =\"UTF-8\").read()\n# Create the conversation\n#conversation_list = create_conversation(conversation_prompt,text,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\nprint(\"conversation created by llm\")\nprint(\"START !!!!!!!!!!!!!!!!!!!!!!!!!!\")\nconversation_list = [{'role': 'Man',\n  'text': \"<speak><prosody rate='slow'>مرحبًا بالجميع،</prosody> <break time='1s'/> اليوم سنتحدث عن شيء مثير للاهتمام. <break time='1s'/> أنا محمد، مؤثر في مجال النشر الرقمي والسياسي. بالنسبة لي، هذا الموضوع يعني تغيرات هائلة في السياسة والمجتمع الأمريكي. ماذا يعني لكِ، آمنة؟</speak>\"},\n]",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "MODEL",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "MODEL = os.getenv(\"MODEL\")\nconversation_prompt = open(\"PROMPTS/conversation_prompt.txt\", \"r\", encoding =\"UTF-8\").read()\n# Create the conversation\n#conversation_list = create_conversation(conversation_prompt,text,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\nprint(\"conversation created by llm\")\nprint(\"START !!!!!!!!!!!!!!!!!!!!!!!!!!\")\nconversation_list = [{'role': 'Man',\n  'text': \"<speak><prosody rate='slow'>مرحبًا بالجميع،</prosody> <break time='1s'/> اليوم سنتحدث عن شيء مثير للاهتمام. <break time='1s'/> أنا محمد، مؤثر في مجال النشر الرقمي والسياسي. بالنسبة لي، هذا الموضوع يعني تغيرات هائلة في السياسة والمجتمع الأمريكي. ماذا يعني لكِ، آمنة؟</speak>\"},\n]\n# Access the variables",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "conversation_prompt",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "conversation_prompt = open(\"PROMPTS/conversation_prompt.txt\", \"r\", encoding =\"UTF-8\").read()\n# Create the conversation\n#conversation_list = create_conversation(conversation_prompt,text,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\nprint(\"conversation created by llm\")\nprint(\"START !!!!!!!!!!!!!!!!!!!!!!!!!!\")\nconversation_list = [{'role': 'Man',\n  'text': \"<speak><prosody rate='slow'>مرحبًا بالجميع،</prosody> <break time='1s'/> اليوم سنتحدث عن شيء مثير للاهتمام. <break time='1s'/> أنا محمد، مؤثر في مجال النشر الرقمي والسياسي. بالنسبة لي، هذا الموضوع يعني تغيرات هائلة في السياسة والمجتمع الأمريكي. ماذا يعني لكِ، آمنة؟</speak>\"},\n]\n# Access the variables\nVOICE_ID_MAN = os.getenv(\"VOICE_ID_MAN\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "#conversation_list",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "#conversation_list = create_conversation(conversation_prompt,text,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\nprint(\"conversation created by llm\")\nprint(\"START !!!!!!!!!!!!!!!!!!!!!!!!!!\")\nconversation_list = [{'role': 'Man',\n  'text': \"<speak><prosody rate='slow'>مرحبًا بالجميع،</prosody> <break time='1s'/> اليوم سنتحدث عن شيء مثير للاهتمام. <break time='1s'/> أنا محمد، مؤثر في مجال النشر الرقمي والسياسي. بالنسبة لي، هذا الموضوع يعني تغيرات هائلة في السياسة والمجتمع الأمريكي. ماذا يعني لكِ، آمنة؟</speak>\"},\n]\n# Access the variables\nVOICE_ID_MAN = os.getenv(\"VOICE_ID_MAN\")\nVOICE_ID_WOMAN = os.getenv(\"VOICE_ID_WOMAN\")\nAUDIO_OUTPUT_FILE = os.getenv(\"AUDIO_OUTPUT_FILE\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "conversation_list",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "conversation_list = [{'role': 'Man',\n  'text': \"<speak><prosody rate='slow'>مرحبًا بالجميع،</prosody> <break time='1s'/> اليوم سنتحدث عن شيء مثير للاهتمام. <break time='1s'/> أنا محمد، مؤثر في مجال النشر الرقمي والسياسي. بالنسبة لي، هذا الموضوع يعني تغيرات هائلة في السياسة والمجتمع الأمريكي. ماذا يعني لكِ، آمنة؟</speak>\"},\n]\n# Access the variables\nVOICE_ID_MAN = os.getenv(\"VOICE_ID_MAN\")\nVOICE_ID_WOMAN = os.getenv(\"VOICE_ID_WOMAN\")\nAUDIO_OUTPUT_FILE = os.getenv(\"AUDIO_OUTPUT_FILE\")\n# Load the proxies from the JSON file\nwith open(\"proxies.json\", \"r\") as file:\n    proxies = json.load(file)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "VOICE_ID_MAN",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "VOICE_ID_MAN = os.getenv(\"VOICE_ID_MAN\")\nVOICE_ID_WOMAN = os.getenv(\"VOICE_ID_WOMAN\")\nAUDIO_OUTPUT_FILE = os.getenv(\"AUDIO_OUTPUT_FILE\")\n# Load the proxies from the JSON file\nwith open(\"proxies.json\", \"r\") as file:\n    proxies = json.load(file)\n# create podcust audio\n#audios_list = create_audios(conversation_list,proxies,VOICE_ID_MAN,VOICE_ID_WOMAN)\naudios_list = [\"podcast/segment_0.mp3\",\"podcast/segment_1.mp3\",\"podcast/segment_2.mp3\"]\npath_podcust_audio = \"podcast/podcast_final.mp3\"",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "VOICE_ID_WOMAN",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "VOICE_ID_WOMAN = os.getenv(\"VOICE_ID_WOMAN\")\nAUDIO_OUTPUT_FILE = os.getenv(\"AUDIO_OUTPUT_FILE\")\n# Load the proxies from the JSON file\nwith open(\"proxies.json\", \"r\") as file:\n    proxies = json.load(file)\n# create podcust audio\n#audios_list = create_audios(conversation_list,proxies,VOICE_ID_MAN,VOICE_ID_WOMAN)\naudios_list = [\"podcast/segment_0.mp3\",\"podcast/segment_1.mp3\",\"podcast/segment_2.mp3\"]\npath_podcust_audio = \"podcast/podcast_final.mp3\"\nprint(\"audios_list\",audios_list)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "AUDIO_OUTPUT_FILE",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "AUDIO_OUTPUT_FILE = os.getenv(\"AUDIO_OUTPUT_FILE\")\n# Load the proxies from the JSON file\nwith open(\"proxies.json\", \"r\") as file:\n    proxies = json.load(file)\n# create podcust audio\n#audios_list = create_audios(conversation_list,proxies,VOICE_ID_MAN,VOICE_ID_WOMAN)\naudios_list = [\"podcast/segment_0.mp3\",\"podcast/segment_1.mp3\",\"podcast/segment_2.mp3\"]\npath_podcust_audio = \"podcast/podcast_final.mp3\"\nprint(\"audios_list\",audios_list)\n#path_podcust_audio = create_one_audio(audios_list,AUDIO_OUTPUT_FILE)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "#audios_list",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "#audios_list = create_audios(conversation_list,proxies,VOICE_ID_MAN,VOICE_ID_WOMAN)\naudios_list = [\"podcast/segment_0.mp3\",\"podcast/segment_1.mp3\",\"podcast/segment_2.mp3\"]\npath_podcust_audio = \"podcast/podcast_final.mp3\"\nprint(\"audios_list\",audios_list)\n#path_podcust_audio = create_one_audio(audios_list,AUDIO_OUTPUT_FILE)\nprint(\"audios_list\",audios_list)\nprint(\"path_podcust_audio\",path_podcust_audio)\n# create music background\nHUGGING_FACE_TOKEN = os.getenv(\"HUGGING_FACE_TOKEN\")\nMUSIC_API_URL = os.getenv(\"MUSIC_API_URL\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "audios_list",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "audios_list = [\"podcast/segment_0.mp3\",\"podcast/segment_1.mp3\",\"podcast/segment_2.mp3\"]\npath_podcust_audio = \"podcast/podcast_final.mp3\"\nprint(\"audios_list\",audios_list)\n#path_podcust_audio = create_one_audio(audios_list,AUDIO_OUTPUT_FILE)\nprint(\"audios_list\",audios_list)\nprint(\"path_podcust_audio\",path_podcust_audio)\n# create music background\nHUGGING_FACE_TOKEN = os.getenv(\"HUGGING_FACE_TOKEN\")\nMUSIC_API_URL = os.getenv(\"MUSIC_API_URL\")\nllm_music_prompt = open(\"PROMPTS/music_prompt.txt\", \"r\", encoding =\"UTF-8\").read()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "path_podcust_audio",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "path_podcust_audio = \"podcast/podcast_final.mp3\"\nprint(\"audios_list\",audios_list)\n#path_podcust_audio = create_one_audio(audios_list,AUDIO_OUTPUT_FILE)\nprint(\"audios_list\",audios_list)\nprint(\"path_podcust_audio\",path_podcust_audio)\n# create music background\nHUGGING_FACE_TOKEN = os.getenv(\"HUGGING_FACE_TOKEN\")\nMUSIC_API_URL = os.getenv(\"MUSIC_API_URL\")\nllm_music_prompt = open(\"PROMPTS/music_prompt.txt\", \"r\", encoding =\"UTF-8\").read()\nconversation = open(\"conversation.txt\", \"r\", encoding =\"UTF-8\").read()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "#path_podcust_audio",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "#path_podcust_audio = create_one_audio(audios_list,AUDIO_OUTPUT_FILE)\nprint(\"audios_list\",audios_list)\nprint(\"path_podcust_audio\",path_podcust_audio)\n# create music background\nHUGGING_FACE_TOKEN = os.getenv(\"HUGGING_FACE_TOKEN\")\nMUSIC_API_URL = os.getenv(\"MUSIC_API_URL\")\nllm_music_prompt = open(\"PROMPTS/music_prompt.txt\", \"r\", encoding =\"UTF-8\").read()\nconversation = open(\"conversation.txt\", \"r\", encoding =\"UTF-8\").read()\n#music_prompt = send_prompt(llm_music_prompt,conversation,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\nmusic_prompt = \"Create a calm song about a podcast discussing political and social awareness, featuring instruments such as acoustic guitar, soft piano, and gentle strings. The tempo should be slow and soothing, setting a relaxed atmosphere for reflection on the podcast's dialogue between Mohamed and Amina. Capture the essence of their thoughtful conversation on the importance of political participation and social impact. Feel free to incorporate Arabic influences in the melody to reflect the cultural exchange in the podcast. Let the music evoke a sense of introspection and contemplation as listeners engage with the podcast's thought-provoking themes.\"",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "HUGGING_FACE_TOKEN",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "HUGGING_FACE_TOKEN = os.getenv(\"HUGGING_FACE_TOKEN\")\nMUSIC_API_URL = os.getenv(\"MUSIC_API_URL\")\nllm_music_prompt = open(\"PROMPTS/music_prompt.txt\", \"r\", encoding =\"UTF-8\").read()\nconversation = open(\"conversation.txt\", \"r\", encoding =\"UTF-8\").read()\n#music_prompt = send_prompt(llm_music_prompt,conversation,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\nmusic_prompt = \"Create a calm song about a podcast discussing political and social awareness, featuring instruments such as acoustic guitar, soft piano, and gentle strings. The tempo should be slow and soothing, setting a relaxed atmosphere for reflection on the podcast's dialogue between Mohamed and Amina. Capture the essence of their thoughtful conversation on the importance of political participation and social impact. Feel free to incorporate Arabic influences in the melody to reflect the cultural exchange in the podcast. Let the music evoke a sense of introspection and contemplation as listeners engage with the podcast's thought-provoking themes.\"\nprint(\"music_prompt\",music_prompt)\n\"\"\"path_music = generate_music(music_prompt,\n                conversation,\n                HUGGING_FACE_TOKEN,",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "MUSIC_API_URL",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "MUSIC_API_URL = os.getenv(\"MUSIC_API_URL\")\nllm_music_prompt = open(\"PROMPTS/music_prompt.txt\", \"r\", encoding =\"UTF-8\").read()\nconversation = open(\"conversation.txt\", \"r\", encoding =\"UTF-8\").read()\n#music_prompt = send_prompt(llm_music_prompt,conversation,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\nmusic_prompt = \"Create a calm song about a podcast discussing political and social awareness, featuring instruments such as acoustic guitar, soft piano, and gentle strings. The tempo should be slow and soothing, setting a relaxed atmosphere for reflection on the podcast's dialogue between Mohamed and Amina. Capture the essence of their thoughtful conversation on the importance of political participation and social impact. Feel free to incorporate Arabic influences in the melody to reflect the cultural exchange in the podcast. Let the music evoke a sense of introspection and contemplation as listeners engage with the podcast's thought-provoking themes.\"\nprint(\"music_prompt\",music_prompt)\n\"\"\"path_music = generate_music(music_prompt,\n                conversation,\n                HUGGING_FACE_TOKEN,\n                MUSIC_API_URL,",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "llm_music_prompt",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "llm_music_prompt = open(\"PROMPTS/music_prompt.txt\", \"r\", encoding =\"UTF-8\").read()\nconversation = open(\"conversation.txt\", \"r\", encoding =\"UTF-8\").read()\n#music_prompt = send_prompt(llm_music_prompt,conversation,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\nmusic_prompt = \"Create a calm song about a podcast discussing political and social awareness, featuring instruments such as acoustic guitar, soft piano, and gentle strings. The tempo should be slow and soothing, setting a relaxed atmosphere for reflection on the podcast's dialogue between Mohamed and Amina. Capture the essence of their thoughtful conversation on the importance of political participation and social impact. Feel free to incorporate Arabic influences in the melody to reflect the cultural exchange in the podcast. Let the music evoke a sense of introspection and contemplation as listeners engage with the podcast's thought-provoking themes.\"\nprint(\"music_prompt\",music_prompt)\n\"\"\"path_music = generate_music(music_prompt,\n                conversation,\n                HUGGING_FACE_TOKEN,\n                MUSIC_API_URL,\n                \"podcast/background.mp3\")\"\"\"",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "conversation",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "conversation = open(\"conversation.txt\", \"r\", encoding =\"UTF-8\").read()\n#music_prompt = send_prompt(llm_music_prompt,conversation,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\nmusic_prompt = \"Create a calm song about a podcast discussing political and social awareness, featuring instruments such as acoustic guitar, soft piano, and gentle strings. The tempo should be slow and soothing, setting a relaxed atmosphere for reflection on the podcast's dialogue between Mohamed and Amina. Capture the essence of their thoughtful conversation on the importance of political participation and social impact. Feel free to incorporate Arabic influences in the melody to reflect the cultural exchange in the podcast. Let the music evoke a sense of introspection and contemplation as listeners engage with the podcast's thought-provoking themes.\"\nprint(\"music_prompt\",music_prompt)\n\"\"\"path_music = generate_music(music_prompt,\n                conversation,\n                HUGGING_FACE_TOKEN,\n                MUSIC_API_URL,\n                \"podcast/background.mp3\")\"\"\"\n# fix music (adding metadata)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "#music_prompt",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "#music_prompt = send_prompt(llm_music_prompt,conversation,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\nmusic_prompt = \"Create a calm song about a podcast discussing political and social awareness, featuring instruments such as acoustic guitar, soft piano, and gentle strings. The tempo should be slow and soothing, setting a relaxed atmosphere for reflection on the podcast's dialogue between Mohamed and Amina. Capture the essence of their thoughtful conversation on the importance of political participation and social impact. Feel free to incorporate Arabic influences in the melody to reflect the cultural exchange in the podcast. Let the music evoke a sense of introspection and contemplation as listeners engage with the podcast's thought-provoking themes.\"\nprint(\"music_prompt\",music_prompt)\n\"\"\"path_music = generate_music(music_prompt,\n                conversation,\n                HUGGING_FACE_TOKEN,\n                MUSIC_API_URL,\n                \"podcast/background.mp3\")\"\"\"\n# fix music (adding metadata)\nprint(\"FIXING BACKGROUND\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "music_prompt",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "music_prompt = \"Create a calm song about a podcast discussing political and social awareness, featuring instruments such as acoustic guitar, soft piano, and gentle strings. The tempo should be slow and soothing, setting a relaxed atmosphere for reflection on the podcast's dialogue between Mohamed and Amina. Capture the essence of their thoughtful conversation on the importance of political participation and social impact. Feel free to incorporate Arabic influences in the melody to reflect the cultural exchange in the podcast. Let the music evoke a sense of introspection and contemplation as listeners engage with the podcast's thought-provoking themes.\"\nprint(\"music_prompt\",music_prompt)\n\"\"\"path_music = generate_music(music_prompt,\n                conversation,\n                HUGGING_FACE_TOKEN,\n                MUSIC_API_URL,\n                \"podcast/background.mp3\")\"\"\"\n# fix music (adding metadata)\nprint(\"FIXING BACKGROUND\")\n#path_fixed = fix_music()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "\"\"\"path_music",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "\"\"\"path_music = generate_music(music_prompt,\n                conversation,\n                HUGGING_FACE_TOKEN,\n                MUSIC_API_URL,\n                \"podcast/background.mp3\")\"\"\"\n# fix music (adding metadata)\nprint(\"FIXING BACKGROUND\")\n#path_fixed = fix_music()\n#print(path_fixed)\npath_fixed = \"podcast/background_fixed.mp3\"",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "#path_fixed",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "#path_fixed = fix_music()\n#print(path_fixed)\npath_fixed = \"podcast/background_fixed.mp3\"\n# mix music with audio \nprint(\"MIXING PODCUST\")\n#path_mixed_audio = mix_podcust_audio(path_podcust_audio,path_fixed)\n#print(path_mixed_audio)\npath_mixed_audio = \"podcast/mixed_podcast.mp3\"\n# generate images\n# Get the IMAGE_API_URLS from the .env file",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "path_fixed",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "path_fixed = \"podcast/background_fixed.mp3\"\n# mix music with audio \nprint(\"MIXING PODCUST\")\n#path_mixed_audio = mix_podcust_audio(path_podcust_audio,path_fixed)\n#print(path_mixed_audio)\npath_mixed_audio = \"podcast/mixed_podcast.mp3\"\n# generate images\n# Get the IMAGE_API_URLS from the .env file\nimage_api_urls_str = os.getenv(\"IMAGE_API_URLS\")\n# Split the string into a list",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "#path_mixed_audio",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "#path_mixed_audio = mix_podcust_audio(path_podcust_audio,path_fixed)\n#print(path_mixed_audio)\npath_mixed_audio = \"podcast/mixed_podcast.mp3\"\n# generate images\n# Get the IMAGE_API_URLS from the .env file\nimage_api_urls_str = os.getenv(\"IMAGE_API_URLS\")\n# Split the string into a list\nIMAGE_API_URLS = image_api_urls_str.split(\",\")\n# Print the list to verify\nprint('IMAGE_API_URLS : ',IMAGE_API_URLS)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "path_mixed_audio",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "path_mixed_audio = \"podcast/mixed_podcast.mp3\"\n# generate images\n# Get the IMAGE_API_URLS from the .env file\nimage_api_urls_str = os.getenv(\"IMAGE_API_URLS\")\n# Split the string into a list\nIMAGE_API_URLS = image_api_urls_str.split(\",\")\n# Print the list to verify\nprint('IMAGE_API_URLS : ',IMAGE_API_URLS)\nllm_images_prompt = open(\"PROMPTS/images_prompt.txt\", \"r\", encoding =\"UTF-8\").read()\n#images_prompt = send_prompt(llm_images_prompt,conversation,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "image_api_urls_str",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "image_api_urls_str = os.getenv(\"IMAGE_API_URLS\")\n# Split the string into a list\nIMAGE_API_URLS = image_api_urls_str.split(\",\")\n# Print the list to verify\nprint('IMAGE_API_URLS : ',IMAGE_API_URLS)\nllm_images_prompt = open(\"PROMPTS/images_prompt.txt\", \"r\", encoding =\"UTF-8\").read()\n#images_prompt = send_prompt(llm_images_prompt,conversation,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\n#print('image prompt :',images_prompt)\nimages_prompt = \"\"\"1. An image of two individuals engaged in a passionate conversation about politics and social issues, symbolizing the podcast's focus on raising political awareness and democratic participation.\n2. A graphic illustration showcasing various symbols of individual rights and freedoms intertwined with political elements, representing the podcast's theme of advocating for personal liberties and civic engagement.",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "IMAGE_API_URLS",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "IMAGE_API_URLS = image_api_urls_str.split(\",\")\n# Print the list to verify\nprint('IMAGE_API_URLS : ',IMAGE_API_URLS)\nllm_images_prompt = open(\"PROMPTS/images_prompt.txt\", \"r\", encoding =\"UTF-8\").read()\n#images_prompt = send_prompt(llm_images_prompt,conversation,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\n#print('image prompt :',images_prompt)\nimages_prompt = \"\"\"1. An image of two individuals engaged in a passionate conversation about politics and social issues, symbolizing the podcast's focus on raising political awareness and democratic participation.\n2. A graphic illustration showcasing various symbols of individual rights and freedoms intertwined with political elements, representing the podcast's theme of advocating for personal liberties and civic engagement.\n3. A vibrant visual representation of a diverse group of young people casting their votes in an election, highlighting the importance of youth involvement in shaping political decisions.\n4. A scene depicting a person attending a political rally holding a sign with a powerful message, inspired by the podcast's content on the impact of political participation in the society.",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "llm_images_prompt",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "llm_images_prompt = open(\"PROMPTS/images_prompt.txt\", \"r\", encoding =\"UTF-8\").read()\n#images_prompt = send_prompt(llm_images_prompt,conversation,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\n#print('image prompt :',images_prompt)\nimages_prompt = \"\"\"1. An image of two individuals engaged in a passionate conversation about politics and social issues, symbolizing the podcast's focus on raising political awareness and democratic participation.\n2. A graphic illustration showcasing various symbols of individual rights and freedoms intertwined with political elements, representing the podcast's theme of advocating for personal liberties and civic engagement.\n3. A vibrant visual representation of a diverse group of young people casting their votes in an election, highlighting the importance of youth involvement in shaping political decisions.\n4. A scene depicting a person attending a political rally holding a sign with a powerful message, inspired by the podcast's content on the impact of political participation in the society.\n5. An abstract artwork with intricate patterns symbolizing the complexity of political influence and societal change, capturing the essence of the podcast's thought-provoking discussions.\n6. A thought-provoking image of a spectrum of diverse voices coming together in unity, reflecting the podcast's theme of inclusivity and the power of shared perspectives in politics.\n7. A dynamic illustration of a vibrant cityscape with people actively engaging in political discourse and activism, representing the podcast's topic of promoting civic engagement among communities.",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "#images_prompt",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "#images_prompt = send_prompt(llm_images_prompt,conversation,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\n#print('image prompt :',images_prompt)\nimages_prompt = \"\"\"1. An image of two individuals engaged in a passionate conversation about politics and social issues, symbolizing the podcast's focus on raising political awareness and democratic participation.\n2. A graphic illustration showcasing various symbols of individual rights and freedoms intertwined with political elements, representing the podcast's theme of advocating for personal liberties and civic engagement.\n3. A vibrant visual representation of a diverse group of young people casting their votes in an election, highlighting the importance of youth involvement in shaping political decisions.\n4. A scene depicting a person attending a political rally holding a sign with a powerful message, inspired by the podcast's content on the impact of political participation in the society.\n5. An abstract artwork with intricate patterns symbolizing the complexity of political influence and societal change, capturing the essence of the podcast's thought-provoking discussions.\n6. A thought-provoking image of a spectrum of diverse voices coming together in unity, reflecting the podcast's theme of inclusivity and the power of shared perspectives in politics.\n7. A dynamic illustration of a vibrant cityscape with people actively engaging in political discourse and activism, representing the podcast's topic of promoting civic engagement among communities.\n8. A visually appealing infographic showcasing key points related to the podcast's main idea of the intersection between politics and marginalized communities, making the information accessible and engaging.",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "images_prompt",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "images_prompt = \"\"\"1. An image of two individuals engaged in a passionate conversation about politics and social issues, symbolizing the podcast's focus on raising political awareness and democratic participation.\n2. A graphic illustration showcasing various symbols of individual rights and freedoms intertwined with political elements, representing the podcast's theme of advocating for personal liberties and civic engagement.\n3. A vibrant visual representation of a diverse group of young people casting their votes in an election, highlighting the importance of youth involvement in shaping political decisions.\n4. A scene depicting a person attending a political rally holding a sign with a powerful message, inspired by the podcast's content on the impact of political participation in the society.\n5. An abstract artwork with intricate patterns symbolizing the complexity of political influence and societal change, capturing the essence of the podcast's thought-provoking discussions.\n6. A thought-provoking image of a spectrum of diverse voices coming together in unity, reflecting the podcast's theme of inclusivity and the power of shared perspectives in politics.\n7. A dynamic illustration of a vibrant cityscape with people actively engaging in political discourse and activism, representing the podcast's topic of promoting civic engagement among communities.\n8. A visually appealing infographic showcasing key points related to the podcast's main idea of the intersection between politics and marginalized communities, making the information accessible and engaging.\n9. A detailed and dynamic collage featuring various symbols of political activism and social change, inspired by the podcast's in-depth exploration of the impact of current political trends on marginalized groups.\n10. A captivating scene of individuals from different backgrounds coming together in a public square, exchanging ideas and opinions on political matters, capturing the essence of the podcast's theme on promoting dialogue and awareness in the society.\"\"\"",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "#prompts_list",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "#prompts_list = create_images_prompts(images_prompt)\nprompts_list = [\"An image of two individuals engaged in a passionate conversation about politics and social issues, symbolizing the podcast's focus on raising political awareness and democratic participation.\", \"A graphic illustration showcasing various symbols of individual rights and freedoms intertwined with political elements, representing the podcast's theme of advocating for personal liberties and civic engagement.\", 'A vibrant visual representation of a diverse group of young people casting their votes in an election, highlighting the importance of youth involvement in shaping political decisions.', \"A scene depicting a person attending a political rally holding a sign with a powerful message, inspired by the podcast's content on the impact of political participation in the society.\", \"An abstract artwork with intricate patterns symbolizing the complexity of political influence and societal change, capturing the essence of the podcast's thought-provoking discussions.\", \"A thought-provoking image of a spectrum of diverse voices coming together in unity, reflecting the podcast's theme of inclusivity and the power of shared perspectives in politics.\", \"A dynamic illustration of a vibrant cityscape with people actively engaging in political discourse and activism, representing the podcast's topic of promoting civic engagement among communities.\", \"A visually appealing infographic showcasing key points related to the podcast's main idea of the intersection between politics and marginalized communities, making the information accessible and engaging.\", \"A detailed and dynamic collage featuring various symbols of political activism and social change, inspired by the podcast's in-depth exploration of the impact of current political trends on marginalized groups.\", \"A captivating scene of individuals from different backgrounds coming together in a public square, exchanging ideas and opinions on political matters, capturing the essence of the podcast's theme on promoting dialogue and awareness in the society.\"]\n#print(\"prompts list : \",prompts_list)\n#path_created_images = create_images(prompts_list,IMAGE_API_URLS,HUGGING_FACE_TOKEN)\n#print('images generated : ', path_created_images )\n# generate vedios\npath_created_images = ['images/generated_image_0.png', 'images/generated_image_1.png', 'images/generated_image_2.png', 'images/generated_image_3.png', 'images/generated_image_4.png', 'images/generated_image_5.png', 'images/generated_image_6.png', 'images/generated_image_7.png', 'images/generated_image_8.png', 'images/generated_image_9.png']\n#output_video_path = generate_video(path_mixed_audio, path_created_images)\noutput_video_path = \"podcast/podcast.mp4\"\n# upload to youtube",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "prompts_list",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "prompts_list = [\"An image of two individuals engaged in a passionate conversation about politics and social issues, symbolizing the podcast's focus on raising political awareness and democratic participation.\", \"A graphic illustration showcasing various symbols of individual rights and freedoms intertwined with political elements, representing the podcast's theme of advocating for personal liberties and civic engagement.\", 'A vibrant visual representation of a diverse group of young people casting their votes in an election, highlighting the importance of youth involvement in shaping political decisions.', \"A scene depicting a person attending a political rally holding a sign with a powerful message, inspired by the podcast's content on the impact of political participation in the society.\", \"An abstract artwork with intricate patterns symbolizing the complexity of political influence and societal change, capturing the essence of the podcast's thought-provoking discussions.\", \"A thought-provoking image of a spectrum of diverse voices coming together in unity, reflecting the podcast's theme of inclusivity and the power of shared perspectives in politics.\", \"A dynamic illustration of a vibrant cityscape with people actively engaging in political discourse and activism, representing the podcast's topic of promoting civic engagement among communities.\", \"A visually appealing infographic showcasing key points related to the podcast's main idea of the intersection between politics and marginalized communities, making the information accessible and engaging.\", \"A detailed and dynamic collage featuring various symbols of political activism and social change, inspired by the podcast's in-depth exploration of the impact of current political trends on marginalized groups.\", \"A captivating scene of individuals from different backgrounds coming together in a public square, exchanging ideas and opinions on political matters, capturing the essence of the podcast's theme on promoting dialogue and awareness in the society.\"]\n#print(\"prompts list : \",prompts_list)\n#path_created_images = create_images(prompts_list,IMAGE_API_URLS,HUGGING_FACE_TOKEN)\n#print('images generated : ', path_created_images )\n# generate vedios\npath_created_images = ['images/generated_image_0.png', 'images/generated_image_1.png', 'images/generated_image_2.png', 'images/generated_image_3.png', 'images/generated_image_4.png', 'images/generated_image_5.png', 'images/generated_image_6.png', 'images/generated_image_7.png', 'images/generated_image_8.png', 'images/generated_image_9.png']\n#output_video_path = generate_video(path_mixed_audio, path_created_images)\noutput_video_path = \"podcast/podcast.mp4\"\n# upload to youtube\nUPLOAD_TO_YOUTUBE = os.getenv(\"UPLOAD_TO_YOUTUBE\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "#path_created_images",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "#path_created_images = create_images(prompts_list,IMAGE_API_URLS,HUGGING_FACE_TOKEN)\n#print('images generated : ', path_created_images )\n# generate vedios\npath_created_images = ['images/generated_image_0.png', 'images/generated_image_1.png', 'images/generated_image_2.png', 'images/generated_image_3.png', 'images/generated_image_4.png', 'images/generated_image_5.png', 'images/generated_image_6.png', 'images/generated_image_7.png', 'images/generated_image_8.png', 'images/generated_image_9.png']\n#output_video_path = generate_video(path_mixed_audio, path_created_images)\noutput_video_path = \"podcast/podcast.mp4\"\n# upload to youtube\nUPLOAD_TO_YOUTUBE = os.getenv(\"UPLOAD_TO_YOUTUBE\")\nTOKEN_FILE_YOUTUBE = os.getenv(\"TOKEN_FILE_YOUTUBE\")\nshare_prompt = open(\"PROMPTS/share_prompt.txt\", \"r\", encoding =\"UTF-8\").read()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "path_created_images",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "path_created_images = ['images/generated_image_0.png', 'images/generated_image_1.png', 'images/generated_image_2.png', 'images/generated_image_3.png', 'images/generated_image_4.png', 'images/generated_image_5.png', 'images/generated_image_6.png', 'images/generated_image_7.png', 'images/generated_image_8.png', 'images/generated_image_9.png']\n#output_video_path = generate_video(path_mixed_audio, path_created_images)\noutput_video_path = \"podcast/podcast.mp4\"\n# upload to youtube\nUPLOAD_TO_YOUTUBE = os.getenv(\"UPLOAD_TO_YOUTUBE\")\nTOKEN_FILE_YOUTUBE = os.getenv(\"TOKEN_FILE_YOUTUBE\")\nshare_prompt = open(\"PROMPTS/share_prompt.txt\", \"r\", encoding =\"UTF-8\").read()\nprint('sharing is :', UPLOAD_TO_YOUTUBE)\nif UPLOAD_TO_YOUTUBE == \"ON\":\n    print(share_prompt)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "#output_video_path",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "#output_video_path = generate_video(path_mixed_audio, path_created_images)\noutput_video_path = \"podcast/podcast.mp4\"\n# upload to youtube\nUPLOAD_TO_YOUTUBE = os.getenv(\"UPLOAD_TO_YOUTUBE\")\nTOKEN_FILE_YOUTUBE = os.getenv(\"TOKEN_FILE_YOUTUBE\")\nshare_prompt = open(\"PROMPTS/share_prompt.txt\", \"r\", encoding =\"UTF-8\").read()\nprint('sharing is :', UPLOAD_TO_YOUTUBE)\nif UPLOAD_TO_YOUTUBE == \"ON\":\n    print(share_prompt)\n    video_infos = send_prompt(share_prompt,conversation,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "output_video_path",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "output_video_path = \"podcast/podcast.mp4\"\n# upload to youtube\nUPLOAD_TO_YOUTUBE = os.getenv(\"UPLOAD_TO_YOUTUBE\")\nTOKEN_FILE_YOUTUBE = os.getenv(\"TOKEN_FILE_YOUTUBE\")\nshare_prompt = open(\"PROMPTS/share_prompt.txt\", \"r\", encoding =\"UTF-8\").read()\nprint('sharing is :', UPLOAD_TO_YOUTUBE)\nif UPLOAD_TO_YOUTUBE == \"ON\":\n    print(share_prompt)\n    video_infos = send_prompt(share_prompt,conversation,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\n    title, description, tags = split_infos(video_infos)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "UPLOAD_TO_YOUTUBE",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "UPLOAD_TO_YOUTUBE = os.getenv(\"UPLOAD_TO_YOUTUBE\")\nTOKEN_FILE_YOUTUBE = os.getenv(\"TOKEN_FILE_YOUTUBE\")\nshare_prompt = open(\"PROMPTS/share_prompt.txt\", \"r\", encoding =\"UTF-8\").read()\nprint('sharing is :', UPLOAD_TO_YOUTUBE)\nif UPLOAD_TO_YOUTUBE == \"ON\":\n    print(share_prompt)\n    video_infos = send_prompt(share_prompt,conversation,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\n    title, description, tags = split_infos(video_infos)\n    with open(\"video_infos.txt\", \"w\", encoding =\"UTF-8\") as file:\n        content = f\"\"\"",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "TOKEN_FILE_YOUTUBE",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "TOKEN_FILE_YOUTUBE = os.getenv(\"TOKEN_FILE_YOUTUBE\")\nshare_prompt = open(\"PROMPTS/share_prompt.txt\", \"r\", encoding =\"UTF-8\").read()\nprint('sharing is :', UPLOAD_TO_YOUTUBE)\nif UPLOAD_TO_YOUTUBE == \"ON\":\n    print(share_prompt)\n    video_infos = send_prompt(share_prompt,conversation,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\n    title, description, tags = split_infos(video_infos)\n    with open(\"video_infos.txt\", \"w\", encoding =\"UTF-8\") as file:\n        content = f\"\"\"\n        video infos : {video_infos} .",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "share_prompt",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "share_prompt = open(\"PROMPTS/share_prompt.txt\", \"r\", encoding =\"UTF-8\").read()\nprint('sharing is :', UPLOAD_TO_YOUTUBE)\nif UPLOAD_TO_YOUTUBE == \"ON\":\n    print(share_prompt)\n    video_infos = send_prompt(share_prompt,conversation,OPENROUTER_API_URL,OPENROUTER_API_KEY,MODEL)\n    title, description, tags = split_infos(video_infos)\n    with open(\"video_infos.txt\", \"w\", encoding =\"UTF-8\") as file:\n        content = f\"\"\"\n        video infos : {video_infos} .\n        title : {title} .",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "proxies",
        "kind": 5,
        "importPath": "save_proxies",
        "description": "save_proxies",
        "peekOfCode": "proxies = [\n    {\"http\": \"http://102.223.186.246:8888\", \"https\": \"http://102.223.186.246:8888\"},\n    {\"http\": \"http://34.212.27.178:1080\", \"https\": \"http://34.212.27.178:1080\"},\n    {\"http\": \"http://134.209.23.180:8888\", \"https\": \"http://134.209.23.180:8888\"},\n    {\"http\": \"http://216.229.112.25:8080\", \"https\": \"http://216.229.112.25:8080\"},\n    {\"http\": \"http://222.252.194.204:8080\", \"https\": \"http://222.252.194.204:8080\"},\n    {\"http\": \"http://51.255.57.241:80\", \"https\": \"http://51.255.57.241:80\"},\n    {\"http\": \"http://72.10.160.174:8717\", \"https\": \"http://72.10.160.174:8717\"},\n    {\"http\": \"http://67.43.227.230:18389\", \"https\": \"http://67.43.227.230:18389\"},\n    {\"http\": \"http://72.10.160.92:23605\", \"https\": \"http://72.10.160.92:23605\"},",
        "detail": "save_proxies",
        "documentation": {}
    }
]