import requests
import time


def create_images_prompts(res):
    # Split the input text into individual prompts
    prompts_list = [line.strip() for line in res.split("\n") if line.strip()]

    # Remove the numbering (e.g., "1. ", "2. ") from each prompt
    prompts_list = [prompt.split(". ", 1)[1] for prompt in prompts_list]

    # Output the list of prompts
    print(prompts_list)

    return prompts_list


def query(API_URL,payload, headers, retries=3, delay=10):
    for i in range(retries):
        try:
            response = requests.post(API_URL, headers=headers, json=payload, timeout=300)
            if response.status_code == 200:
                return response.content
            else:
                print(f"Attempt {i + 1} failed: {response.text}")
                if "estimated_time" in response.text:
                    # Wait for the model to load
                    estimated_time = float(response.json().get("estimated_time", delay))
                    print(f"Model is loading. Waiting for {estimated_time} seconds...")
                    time.sleep(estimated_time)
                else:
                    # Use exponential backoff
                    time.sleep(delay * (2 ** i))
        except requests.exceptions.RequestException as e:
            print(f"Attempt {i + 1} failed with exception: {e}")
            time.sleep(delay * (2 ** i))
    return None


def create_images(prompts_list,IMAGE_API_URLS,HUGGING_FACE_TOKEN):
    headers = {"Authorization": f"Bearer {HUGGING_FACE_TOKEN}"}
    # Hugging Face API endpoints for the models
    API_URLS = [
        "https://api-inference.huggingface.co/models/black-forest-labs/FLUX.1-dev",
        "https://api-inference.huggingface.co/models/ZB-Tech/Text-to-Image",
        "https://api-inference.huggingface.co/models/stabilityai/stable-diffusion-2",
    ]

    # Generate an images
    i=0
    path_created_images = []
    for prompt in prompts_list:
        #prompt = "A cat in the moon"

        # Loop through each model URL
        for j, API_URL in enumerate(IMAGE_API_URLS):
            print(f"Trying model {j + 1}: {API_URL}")
            image_bytes = query(API_URL,{"inputs": prompt},headers)
            if image_bytes != None:
                print("Image generated :)'")
                break
            else:
                print("not generated by ",API_URL)
                continue

        # Save the generated image
        if image_bytes:
            with open(f"images/generated_image_{i}.png", "wb") as f:
                f.write(image_bytes)
            print(f"Image saved as 'images/generated_image_{i}.png'")
            path_created_images.append(f"images/generated_image_{i}.png")

        else:
            print("Failed to generate image after multiple attempts.")
        time.sleep(5)
        i+=1
    
    return path_created_images

